---
import * as path from "path";
import { getCollection } from "astro:content";
import DocLayout from "../../layouts/DocLayout.astro";
import PageNav from "../../components/PageNav.astro";

import {
	getDocSidebar,
	getDocSidebarSubsections,
	type DocSideBarItem,
	getRiftConfig,
} from "../../scripts/riftConfig";
import { getPageTimestamp, getGitTimestamp } from "../../scripts/getPageTimestamp";

export async function getStaticPaths() {
	const docPages = await getCollection("docs");

	return docPages.map((page) => ({
		params: {
			slug: page.slug,
		},
		props: {
			page,
		},
	}));
}

function getCurrentSidebarIndex(subsections: DocSideBarItem[], relativeUrl: string) {
	for (let i = 0; i < subsections.length; i++) {
		if (relativeUrl === subsections[i].link) {
			return i;
		}
	}

	return -1; // Return -1 if it wasn't found.
}

// Config values
const config = getRiftConfig().docs;
const sidebar = getDocSidebar();
const sidebarSubsections = getDocSidebarSubsections();

const relativeUrl = new URL(Astro.url).pathname;
const currentSidebarIndex = getCurrentSidebarIndex(sidebarSubsections, relativeUrl);

// PageNav values
let previous = "";
let previousLabel = "";
let next = "";
let nextLabel = "";

if (currentSidebarIndex > -1) {
	const previousIndex = currentSidebarIndex - 1;
	const nextIndex = currentSidebarIndex + 1;

	// Show previous label if this is not the first subsection
	if (currentSidebarIndex > 0) {
		previous = sidebarSubsections[previousIndex].link;
		previousLabel = sidebarSubsections[previousIndex].text;
	}

	// Show next label if this is not the last subsection
	if (currentSidebarIndex < sidebarSubsections.length - 1) {
		next = sidebarSubsections[nextIndex].link;
		nextLabel = sidebarSubsections[nextIndex].text;
	}
}

// Last updated values
const filePath = path.relative(".", "src/content" + relativeUrl);
let editDate: string = await getPageTimestamp(path.resolve(filePath));
let editLink: string = config.editLink.pattern;
let editLinkText: string = config.editLink.text;

const { page } = Astro.props;
const { Content } = await page.render();

// Front matter overrides
const frontMatterEditDate: string = page.data.lastUpdated;
const frontMatterEditLink: string = page.data.editLink;
const frontMatterEditLinkText: string = page.data.editLinkText;

if (frontMatterEditDate) {
	editDate = frontMatterEditDate;
}

if (frontMatterEditLink) {
	editLink = frontMatterEditLink;
}

if (frontMatterEditLinkText) {
	editLinkText = frontMatterEditLinkText;
}

const gitTime = await getGitTimestamp(path.resolve(filePath));

// TODO: Use git timestamp for last updated
// TODO: Create EditLink pattern

// BUG: Several parts of the page don't work on build.
// PagNav is completely missing, Edit this page is not styled right,
// and the sidebar doesn't show the active page.
---

<DocLayout summary={sidebar}>
	<div class="md-content doc-content">
		<!-- <p>{gitTime}</p> -->
		<Content />
		<br />
		<div class="grid grid-cols-2">
			{
				config.lastUpdated !== false ? (
					<p class="dim-text justify-self-start">Last updated: {editDate}</p>
				) : (
					<div />
				)
			}
			{
				editLink ? (
					<a
						class="no-underline hover:underline hover:text-primary justify-self-end"
						href={editLink}
						target="_blank"
					>
						<p class="text-primary font-bold">
							{editLinkText ? editLinkText : "Edit this page"}
						</p>
					</a>
				) : (
					<div />
				)
			}
		</div>
		<PageNav
			previous={previous}
			previousLabel={previousLabel}
			next={next}
			nextLabel={nextLabel}
		/>
	</div>
</DocLayout>
